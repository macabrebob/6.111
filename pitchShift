///////////////////////////////////////////////////////////////////////////////
//
// 6.111 FPGA Labkit -- Template Toplevel Module
//
// For Labkit Revision 004
//
//
// Created: October 31, 2004, from revision 003 file
// Author: Nathan Ickes
//
///////////////////////////////////////////////////////////////////////////////
//
// CHANGES FOR BOARD REVISION 004
//
// 1) Added signals for logic analyzer pods 2-4.
// 2) Expanded "tv_in_ycrcb" to 20 bits.
// 3) Renamed "tv_out_data" to "tv_out_i2c_data" and "tv_out_sclk" to
//    "tv_out_i2c_clock".
// 4) Reversed disp_data_in and disp_data_out signals, so that "out" is an
//    output of the FPGA, and "in" is an input.
//
// CHANGES FOR BOARD REVISION 003
//
// 1) Combined flash chip enables into a single signal, flash_ce_b.
//
// CHANGES FOR BOARD REVISION 002
//
// 1) Added SRAM clock feedback path input and output
// 2) Renamed "mousedata" to "mouse_data"
// 3) Renamed some ZBT memory signals. Parity bits are now incorporated into 
//    the data bus, and the byte write enables have been combined into the
//    4-bit ram#_bwe_b bus.
// 4) Removed the "systemace_clock" net, since the SystemACE clock is now
//    hardwired on the PCB to the oscillator.
//
///////////////////////////////////////////////////////////////////////////////
//
// Complete change history (including bug fixes)
//
// 2006-Mar-08: Corrected default assignments to "vga_out_red", "vga_out_green"
//              and "vga_out_blue". (Was 10'h0, now 8'h0.)
//
// 2005-Sep-09: Added missing default assignments to "ac97_sdata_out",
//              "disp_data_out", "analyzer[2-3]_clock" and
//              "analyzer[2-3]_data".
//
// 2005-Jan-23: Reduced flash address bus to 24 bits, to match 128Mb devices
//              actually populated on the boards. (The boards support up to
//              256Mb devices, with 25 address lines.)
//
// 2004-Oct-31: Adapted to new revision 004 board.
//
// 2004-May-01: Changed "disp_data_in" to be an output, and gave it a default
//              value. (Previous versions of this file declared this port to
//              be an input.)
//
// 2004-Apr-29: Reduced SRAM address busses to 19 bits, to match 18Mb devices
//              actually populated on the boards. (The boards support up to
//              72Mb devices, with 21 address lines.)
//
// 2004-Apr-29: Change history started
//
///////////////////////////////////////////////////////////////////////////////

module labkit (beep, audio_reset_b, ac97_sdata_out, ac97_sdata_in, ac97_synch,
	       ac97_bit_clock,
	       
	       vga_out_red, vga_out_green, vga_out_blue, vga_out_sync_b,
	       vga_out_blank_b, vga_out_pixel_clock, vga_out_hsync,
	       vga_out_vsync,

	       tv_out_ycrcb, tv_out_reset_b, tv_out_clock, tv_out_i2c_clock,
	       tv_out_i2c_data, tv_out_pal_ntsc, tv_out_hsync_b,
	       tv_out_vsync_b, tv_out_blank_b, tv_out_subcar_reset,

	       tv_in_ycrcb, tv_in_data_valid, tv_in_line_clock1,
	       tv_in_line_clock2, tv_in_aef, tv_in_hff, tv_in_aff,
	       tv_in_i2c_clock, tv_in_i2c_data, tv_in_fifo_read,
	       tv_in_fifo_clock, tv_in_iso, tv_in_reset_b, tv_in_clock,

	       ram0_data, ram0_address, ram0_adv_ld, ram0_clk, ram0_cen_b,
	       ram0_ce_b, ram0_oe_b, ram0_we_b, ram0_bwe_b, 

	       ram1_data, ram1_address, ram1_adv_ld, ram1_clk, ram1_cen_b,
	       ram1_ce_b, ram1_oe_b, ram1_we_b, ram1_bwe_b,

	       clock_feedback_out, clock_feedback_in,

	       flash_data, flash_address, flash_ce_b, flash_oe_b, flash_we_b,
	       flash_reset_b, flash_sts, flash_byte_b,

	       rs232_txd, rs232_rxd, rs232_rts, rs232_cts,

	       mouse_clock, mouse_data, keyboard_clock, keyboard_data,

	       clock_27mhz, clock1, clock2,

	       disp_blank, disp_data_out, disp_clock, disp_rs, disp_ce_b,
	       disp_reset_b, disp_data_in,

	       button0, button1, button2, button3, button_enter, button_right,
	       button_left, button_down, button_up,

	       switch,

	       led,
	       
	       user1, user2, user3, user4,
	       
	       daughtercard,

	       systemace_data, systemace_address, systemace_ce_b,
	       systemace_we_b, systemace_oe_b, systemace_irq, systemace_mpbrdy,
	       
	       analyzer1_data, analyzer1_clock,
 	       analyzer2_data, analyzer2_clock,
 	       analyzer3_data, analyzer3_clock,
 	       analyzer4_data, analyzer4_clock);

   output beep, audio_reset_b, ac97_synch, ac97_sdata_out;
   input  ac97_bit_clock, ac97_sdata_in;
   
   output [7:0] vga_out_red, vga_out_green, vga_out_blue;
   output vga_out_sync_b, vga_out_blank_b, vga_out_pixel_clock,
	  vga_out_hsync, vga_out_vsync;

   output [9:0] tv_out_ycrcb;
   output tv_out_reset_b, tv_out_clock, tv_out_i2c_clock, tv_out_i2c_data,
	  tv_out_pal_ntsc, tv_out_hsync_b, tv_out_vsync_b, tv_out_blank_b,
	  tv_out_subcar_reset;
   
   input  [19:0] tv_in_ycrcb;
   input  tv_in_data_valid, tv_in_line_clock1, tv_in_line_clock2, tv_in_aef,
	  tv_in_hff, tv_in_aff;
   output tv_in_i2c_clock, tv_in_fifo_read, tv_in_fifo_clock, tv_in_iso,
	  tv_in_reset_b, tv_in_clock;
   inout  tv_in_i2c_data;
        
   inout  [35:0] ram0_data;
   output [18:0] ram0_address;
   output ram0_adv_ld, ram0_clk, ram0_cen_b, ram0_ce_b, ram0_oe_b, ram0_we_b;
   output [3:0] ram0_bwe_b;
   
   inout  [35:0] ram1_data;
   output [18:0] ram1_address;
   output ram1_adv_ld, ram1_clk, ram1_cen_b, ram1_ce_b, ram1_oe_b, ram1_we_b;
   output [3:0] ram1_bwe_b;

   input  clock_feedback_in;
   output clock_feedback_out;
   
   inout  [15:0] flash_data;
   output [23:0] flash_address;
   output flash_ce_b, flash_oe_b, flash_we_b, flash_reset_b, flash_byte_b;
   input  flash_sts;
   
   output rs232_txd, rs232_rts;
   input  rs232_rxd, rs232_cts;

   input  mouse_clock, mouse_data, keyboard_clock, keyboard_data;

   input  clock_27mhz, clock1, clock2;

   output disp_blank, disp_clock, disp_rs, disp_ce_b, disp_reset_b;  
   input  disp_data_in;
   output  disp_data_out;
   
   input  button0, button1, button2, button3, button_enter, button_right,
	  button_left, button_down, button_up;
   input  [7:0] switch;
   output [7:0] led;

   inout [31:0] user1, user2, user3, user4;
   
   inout [43:0] daughtercard;

   inout  [15:0] systemace_data;
   output [6:0]  systemace_address;
   output systemace_ce_b, systemace_we_b, systemace_oe_b;
   input  systemace_irq, systemace_mpbrdy;

   output [15:0] analyzer1_data, analyzer2_data, analyzer3_data, 
		 analyzer4_data;
   output analyzer1_clock, analyzer2_clock, analyzer3_clock, analyzer4_clock;

   ////////////////////////////////////////////////////////////////////////////
   //
   // I/O Assignments
   //
   ////////////////////////////////////////////////////////////////////////////
   
   // Audio Input and Output
   assign beep= 1'b0;
   assign audio_reset_b = 1'b0;
   assign ac97_synch = 1'b0;
   assign ac97_sdata_out = 1'b0;
   // ac97_sdata_in is an input

   // VGA Output
   assign vga_out_red = 8'h0;
   assign vga_out_green = 8'h0;
   assign vga_out_blue = 8'h0;
   assign vga_out_sync_b = 1'b1;
   assign vga_out_blank_b = 1'b1;
   assign vga_out_pixel_clock = 1'b0;
   assign vga_out_hsync = 1'b0;
   assign vga_out_vsync = 1'b0;

   // Video Output
   assign tv_out_ycrcb = 10'h0;
   assign tv_out_reset_b = 1'b0;
   assign tv_out_clock = 1'b0;
   assign tv_out_i2c_clock = 1'b0;
   assign tv_out_i2c_data = 1'b0;
   assign tv_out_pal_ntsc = 1'b0;
   assign tv_out_hsync_b = 1'b1;
   assign tv_out_vsync_b = 1'b1;
   assign tv_out_blank_b = 1'b1;
   assign tv_out_subcar_reset = 1'b0;
   
   // Video Input
   assign tv_in_i2c_clock = 1'b0;
   assign tv_in_fifo_read = 1'b0;
   assign tv_in_fifo_clock = 1'b0;
   assign tv_in_iso = 1'b0;
   assign tv_in_reset_b = 1'b0;
   assign tv_in_clock = 1'b0;
   assign tv_in_i2c_data = 1'bZ;
   // tv_in_ycrcb, tv_in_data_valid, tv_in_line_clock1, tv_in_line_clock2, 
   // tv_in_aef, tv_in_hff, and tv_in_aff are inputs
   
   // SRAMs
   assign ram0_data = 36'hZ;
   assign ram0_address = 19'h0;
   assign ram0_adv_ld = 1'b0;
   assign ram0_clk = 1'b0;
   assign ram0_cen_b = 1'b1;
   assign ram0_ce_b = 1'b1;
   assign ram0_oe_b = 1'b1;
   assign ram0_we_b = 1'b1;
   assign ram0_bwe_b = 4'hF;
   assign ram1_data = 36'hZ; 
   assign ram1_address = 19'h0;
   assign ram1_adv_ld = 1'b0;
   assign ram1_clk = 1'b0;
   assign ram1_cen_b = 1'b1;
   assign ram1_ce_b = 1'b1;
   assign ram1_oe_b = 1'b1;
   assign ram1_we_b = 1'b1;
   assign ram1_bwe_b = 4'hF;
   assign clock_feedback_out = 1'b0;
   // clock_feedback_in is an input
   
   // Flash ROM
   assign flash_data = 16'hZ;
   assign flash_address = 24'h0;
   assign flash_ce_b = 1'b1;
   assign flash_oe_b = 1'b1;
   assign flash_we_b = 1'b1;
   assign flash_reset_b = 1'b0;
   assign flash_byte_b = 1'b1;
   // flash_sts is an input

   // RS-232 Interface
   assign rs232_txd = 1'b1;
   assign rs232_rts = 1'b1;
   // rs232_rxd and rs232_cts are inputs

   // PS/2 Ports
   // mouse_clock, mouse_data, keyboard_clock, and keyboard_data are inputs

   // LED Displays
   assign disp_blank = 1'b1;
   assign disp_clock = 1'b0;
   assign disp_rs = 1'b0;
   assign disp_ce_b = 1'b1;
   assign disp_reset_b = 1'b0;
   assign disp_data_out = 1'b0;
   // disp_data_in is an input

   // Buttons, Switches, and Individual LEDs
   assign led = 8'hFF;
   // button0, button1, button2, button3, button_enter, button_right,
   // button_left, button_down, button_up, and switches are inputs

   // User I/Os
   assign user1 = 32'hZ;
   assign user2 = 32'hZ;
   assign user3 = 32'hZ;
   assign user4 = 32'hZ;

   // Daughtercard Connectors
   assign daughtercard = 44'hZ;

   // SystemACE Microprocessor Port
   assign systemace_data = 16'hZ;
   assign systemace_address = 7'h0;
   assign systemace_ce_b = 1'b1;
   assign systemace_we_b = 1'b1;
   assign systemace_oe_b = 1'b1;
   // systemace_irq and systemace_mpbrdy are inputs
	
   // Logic Analyzer
//   assign analyzer3_data = 16'h0;
   assign analyzer3_clock = 1'b1;
//   assign analyzer4_data = 16'h0;
   assign analyzer4_clock = 1'b1;
	
////////////////////////////////////////////////////////////////////////////
  //
  // Reset Generation
  //
  // A shift register primitive is used to generate an active-high reset
  // signal that remains high for 16 clock cycles after configuration finishes
  // and the FPGA's internal clocks begin toggling.
  //
  ////////////////////////////////////////////////////////////////////////////
  wire reset;
  SRL16 reset_sr(.D(1'b0), .CLK(clock_27mhz), .Q(reset),
	         .A0(1'b1), .A1(1'b1), .A2(1'b1), .A3(1'b1));
  defparam reset_sr.INIT = 16'hFFFF;

	wire [18:0] magn_sum_in;
	wire [17:0] magnitude, frequency;
	wire [31:0] bin_deviation;
	wire [8:0] addr;
	wire switch_clean;
	wire write_en;
	wire write_data;
	wire [14:0] bin_addr;
	wire [17:0] bin_dev;
	wire get_next;
	wire [17:0] magn_sum_out_buff;

//	pitchShift uut (
//		.pitch(4'b0), 
//		.clock_27M(clock_27mhz), 
//		.get_next(get_next),
//		.new_bin_freq(new_bin_freq),
//		.new_bin_magn(new_bin_magn),
//		.new_bin_index(new_bin_index),
//		.bin_addr(bin_addr),
//		.restart(restart)
//	);
	wire [4:0] counter;
	wire [31:0] phase;
	wire [31:0] center_freq;
	wire [31:0] frequency_deviation;
	wire [31:0] index_in;
	shiftManager sm(.clock_27mhz(clock_27mhz), .restart(restart),
					.center_freq(center_freq), .index_in(index_in),
					.addr(addr), .we(write_en),
					.counter(counter),
					.switch(switch_clean),
					.frequency_deviation(frequency_deviation),
					.write_data(write_data));
	debounce b1_db(.reset(reset), .clock(clock_27mhz), .noisy(switch[0]),.clean(switch_clean));
	
	assign analyzer1_data = center_freq[31:16];
   assign analyzer1_clock = clock_27mhz;
   assign analyzer3_data = center_freq[15:0]; //mag of current index
   assign analyzer2_clock = 1'b0;//clock_27mhz;
	assign analyzer2_data = index_in[31:16]; //new sum (current + mem)
	assign analyzer4_data = {11'b0,addr}; //sum read from memory
endmodule

module pitchShift(
    input [3:0] pitch,
    input clock_27M,
	 input get_next,
	 input restart,
    output reg signed [17:0] new_bin_freq,			//the true frequency of the resulting shifted bin
	 output reg signed [17:0] new_bin_magn,			//the magnitude of the resulting shifted bin
	 output reg [9:0] new_bin_index					//the index of the shifted bin
	 );

	reg get_next_delayed;
	reg [35:0] bin_data;
	reg [14:0] bin_addr;
	wire signed [17:0] bin_freq_out, bin_magn_out;									
	reg signed [17:0] shift_factor;
	reg [9:0] current_index = 10'b11_1111_1111;
	reg [35:0] new_index_result;
	reg [35:0] bin_freq_result;
	wire [35:0] bin_data_buffer;
	
	parameter C = 4'd0;
	parameter D = 4'd1;
	parameter E = 4'd2;
	parameter F = 4'd3;
	parameter G = 4'd4;

	
	fftdataMon fft_data(.clka(clock_27M), .addra(bin_addr), .douta(bin_data_buffer));
	
	assign bin_freq_out = bin_data[35:18];
	assign bin_magn_out = bin_data[17:0];
	
	always @(*) begin
		case(pitch)
			C:	shift_factor = 18'sb01_0000_0000_0000_0000;
			D: shift_factor = 18'sb01_0011_0011_0011_0011;
			F: shift_factor = 18'sb01_0100_1100_1100_1100;
			G: shift_factor = 18'sb01_1000_0000_0000_0000;
			default: shift_factor = 18'sb01_0000_0000_0000_0000;
		endcase
		
		new_index_result = shift_factor * {8'b0,current_index};
		new_bin_index = new_index_result[35:16];
		new_bin_magn = bin_magn_out;
		bin_freq_result = shift_factor * bin_freq_out;
		new_bin_freq = bin_freq_result >>> 16;
		
	end
	
	always @(posedge clock_27M) begin
		if(restart) begin
			bin_addr <= 0;
			current_index <= 10'b11_1111_1111;
		end
		else if(get_next & !get_next_delayed) begin
			bin_data <= bin_data_buffer;
			bin_addr <= bin_addr + 1;
			if(current_index == 511) current_index <= 0;
			else current_index <= current_index + 1;
		end
		get_next_delayed <= get_next;
	end
endmodule

module shiftManager(
					input clock_27mhz,
					input restart,
					input switch,
					output reg signed [31:0] bin_deviation,
					output signed [17:0] frequency,
					output reg signed [31:0] center_freq,
					output reg [31:0] index_in,
					output reg [9:0] addr,
					output reg we, 
					output reg write_data,
					output reg signed [31:0] frequency_deviation,
					output reg signed [31:0] phase_sum_out_buff,
					output reg [4:0] counter);
					
//	wire we;
//	reg [8:0] addr;
	wire [9:0] sample_counter;
	wire [9:0] index;
	reg [9:0] last_index;
	wire [14:0] temp;
//	wire signed [17:0] frequency;
	wire signed [31:0] phase_sum_out;
	reg signed [31:0] phase_sum_in;
//	reg signed [17:0] phase_sum_out_buff;
//	reg write_data;
	reg get_next;
//	reg counter;
	reg [17:0] magn_sum_in;
	wire [17:0] magnitude;
	wire [17:0] magn_sum_out;
	reg [17:0] magn_sum_out_buff;
	reg signed [31:0] shifted_freq;
//	reg signed [31:0] freq_deviation;
//	reg signed [31:0] center_freq;
	reg signed [63:0] center_freq_prod;
	reg signed [31:0] freq;
//	reg signed [31:0] index_in;
	reg signed [35:0] bin_dev_prod;
	reg signed [31:0] bin_dev_osamp;
	reg signed [63:0] bin_dev_osamp_prod;
	reg signed [31:0] expct_phase_adv;
	reg signed [63:0] expct_phase_adv_prod;
	reg signed [31:0] phase, sum_phase;
	reg [16:0] theta;
	reg [63:0] theta_prod;
	wire signed [17:0] sin_phase, cos_phase;
	wire nd, rfd, rdy;
	reg signed [35:0] real_part;
	reg signed [35:0] imag_part;
	reg [15:0] cos_val;
	wire signed [17:0] neg_inv_two_pi;
	parameter freq_per_bin = 32'sb0_1011_1011_1000_0000_0000; //11.71785
	parameter freq_per_bin_inv = 32'sb0_0001_0101_1101_1000;
	parameter pi_one_half = 32'sb0001_1001_0010_0001_1111; //oversampling factor && expected phase advance
	parameter inv_two_pi = 32'sb0000_0010_1000_1011_1110;
	
	reg [31:0] abs_theta;
		reg signed [31:0] theta_in_pi_range;
		reg signed [63:0] producta;			//for storing a product with overflow bits
		reg signed [63:0] productb;			//for storing a product with overflow bits
		reg [31:0] qpd;							//nearest multiple of pi
		reg signed [31:0] offset;
		reg signed [63:0] cos_index;
		reg signed [31:0] cos_index_temp;
		reg signed [31:0] cos_in;
		reg signed [31:0] new_theta;
		parameter PI = 32'b11_0010_0100_0011_1111;
		parameter two_PI = 32'b11_0010_0100_0011_11110;
		parameter inv_PI = 32'h0000517C;
	
	assign neg_inv_two_pi = -32'sd1 * inv_two_pi;
	assign nd = counter == 10;
	
	pitchShift pshft(.pitch(4'b0),
					.clock_27M(clock_27mhz),
					.get_next(get_next),
					.restart(restart),
					.new_bin_freq(frequency),									
					.new_bin_magn(magnitude),											
					.new_bin_index(index));
	
	ram18x512 magnSumMem(.clka(clock_27mhz),
								.dina(magn_sum_in),
								.addra(addr),
								.wea(write_data),
								.douta(magn_sum_out));
								
	ram32x512 phasSumMem(.clka(clock_27mhz),
								.dina(phase_sum_in),
								.addra(addr),
								.wea(write_data),
								.douta(phase_sum_out));
								
	cosine cos(.THETA(cos_in[31:16]),
					.CLK(clock_27mhz),
					.ND(nd),
					.RFD(rfd),
					.RDY(rdy),
					.SINE(sin_phase),
					.COSINE(cos_phase));
					
	always @(*) begin
		magn_sum_in = magnitude + magn_sum_out_buff;
		freq = frequency <<< 12;
		index_in = {6'b0,index,16'b0};
		
		center_freq_prod = freq_per_bin * index_in;
		center_freq = center_freq_prod >>> 16;
		frequency_deviation = freq - center_freq;
		
		bin_dev_prod = frequency_deviation * freq_per_bin_inv;
		bin_deviation = bin_dev_prod >>> 16;
		
		bin_dev_osamp_prod = bin_deviation * pi_one_half;
		bin_dev_osamp = bin_dev_osamp_prod >>> 16;
		
		expct_phase_adv_prod = index_in * pi_one_half;
		expct_phase_adv = expct_phase_adv_prod >>> 16;
		phase = bin_dev_osamp + expct_phase_adv + phase_sum_out_buff;
		
		
		//map phase to 0-2pi interval
		if(phase < 0) abs_theta = (-32'sd1 * phase);
		else abs_theta = phase;
		producta = abs_theta * inv_PI;
		qpd = {producta[47:32],16'b0};								//nearest integer multiple of pi
		offset = qpd + (qpd&32'h10000);							//must subtract a multiple of 2*pi
		productb = PI*offset;
		if(theta >= 0) theta_in_pi_range = phase - (productb>>>16);
		else theta_in_pi_range = phase + (productb>>>16);
		if (theta_in_pi_range >= 0) begin
			cos_index_temp = theta_in_pi_range;	
		end else cos_index_temp = two_PI + theta_in_pi_range;	
		cos_index = cos_index_temp * inv_two_pi;
		cos_in = cos_index[31:0];
		
		real_part = magnitude * cos_phase;
		imag_part = magnitude * sin_phase;
		phase_sum_in = phase;

		get_next = switch & counter == 0;
		addr = index[8:0];
		if(we & index < 512) write_data = 1;
		else write_data = 0;
		
	end
	
	always @(posedge clock_27mhz) begin
		if(restart) begin
			counter <= 0;
			we <= 0;
		end
		if(switch) counter <= counter + 1;
		if(counter == 28 || counter == 30) we <= ~we;
		if (index < 512 && switch && counter == 3) begin
			magn_sum_out_buff <= magn_sum_out;
			phase_sum_out_buff <= phase_sum_out;
		end 
	end
endmodule

// Switch Debounce Module
// use your system clock for the clock input
// to produce a synchronous, debounced output
module debounce #(parameter DELAY=270000)   // .01 sec with a 27Mhz clock
	        (input reset, clock, noisy,
	         output reg clean);

   reg [18:0] count;
   reg new;

   always @(posedge clock)
     if (reset)
       begin
	  count <= 0;
	  new <= noisy;
	  clean <= noisy;
       end
     else if (noisy != new)
       begin
	  new <= noisy;
	  count <= 0;
       end
     else if (count == DELAY)
       clean <= new;
     else
       count <= count+1;
      
endmodule

module clockDivider(input clock_27mhz, input[4:0] numCycles, output enable);
	reg [4:0] counter;
	
	assign enable = (counter == numCycles);
	
	always @(posedge clock_27mhz) begin
		if(counter == numCycles) counter <= 0;
		else counter <= counter + 1;
	end
endmodule
