`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    15:58:40 11/27/2014 
// Design Name: 
// Module Name:    pitchShift 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module pitchShift(
    input [3:0] pitch,
    input clock_27M,
	 input get_next,
	 input restart,
    output reg signed [31:0] new_bin_freq,			//the true frequency of the resulting shifted bin
	 output reg signed [31:0] new_bin_magn,			//the magnitude of the resulting shifted bin
	 output reg signed [31:0] new_bin_index					//the index of the shifted bin
	 );

	reg get_next_delayed;
//	reg [35:0] bin_data;
	reg [14:0] bin_addr = 0;
	reg signed [31:0] bin_freq_out, bin_magn_out;									
	reg signed [31:0] shift_factor;
	reg [31:0] current_index = 32'h1FF_0000;
	reg [63:0] new_index_result;
	reg [63:0] bin_freq_result;
	wire signed [31:0] bin_freq_buffer;
	wire signed [31:0] bin_magn_buffer;
	
	parameter C = 4'd0;
	parameter D = 4'd1;
	parameter E = 4'd2;
	parameter F = 4'd3;
	parameter G = 4'd4;

	
	magn_rom magn_data(.clka(clock_27M), .addra(bin_addr), .douta(bin_magn_buffer));
	freq_rom freq_data(.clka(clock_27M), .addra(bin_addr), .douta(bin_freq_buffer));
	
//	assign bin_freq_out = bin_data[35:18];
//	assign bin_magn_out = bin_data[17:0];
	
	always @(*) begin
		case(pitch)
			C:	shift_factor = 32'sb01_0000_0000_0000_0000;
			D: shift_factor = 32'sb01_0011_0011_0011_0011;
			F: shift_factor = 32'sb01_0100_1100_1100_1100;
			G: shift_factor = 32'sb01_1000_0000_0000_0000;
			default: shift_factor = 32'sb01_0000_0000_0000_0000;
		endcase
		
		new_index_result = shift_factor * current_index;
		new_bin_index = new_index_result >>> 16;
//		new_bin_magn = bin_magn_out;
		bin_freq_result = shift_factor * bin_freq_out;
		new_bin_freq = bin_freq_result >>> 16;
		new_bin_magn = bin_magn_out;
	end
	
	always @(posedge clock_27M) begin
		if(restart) begin
			bin_addr <= 0;
			current_index <= 32'h1FF_0000;
		end
		else if(get_next) begin
			bin_magn_out <= bin_magn_buffer;
			bin_freq_out <= bin_freq_buffer;
			bin_addr <= bin_addr + 1;
			if(current_index[31:16] == 511) current_index <= 0;
			else current_index <= current_index + 17'h10000;
		end
		get_next_delayed <= get_next;
	end
endmodule

module shiftManager(
					input clock_27mhz,
					input restart,
					input switch);
					
	reg [4:0] counter;				
	reg we;
	wire [9:0] sample_counter;

	reg signed [31:0] center_frequency;
	reg signed [63:0] center_freq_prod;
	reg signed [31:0] frequency_deviation;
	reg signed [31:0] bin_deviation;
	reg signed [63:0] bin_dev_prod;
	reg signed [31:0] bin_dev_osamp;
	reg signed [63:0] bin_dev_osamp_prod;
	reg signed [31:0] expct_phase_adv;
	reg signed [63:0] expct_phase_adv_prod;
	reg signed [31:0] phase, sum_phase;
	reg [63:0] theta_prod;
	wire signed [17:0] sin_phase, cos_phase;
	
	reg signed [50:0] real_part;
	reg signed [50:0] imag_part;

	parameter freq_per_bin = 32'sb0_1011_1011_1000_0000_0000; //11.71785
	parameter freq_per_bin_inv = 32'sb0_0001_0101_1101_1000;
	parameter pi_one_half = 32'sb0001_1001_0010_0001_1111; //oversampling factor && expected phase advance
	parameter inv_two_pi = 32'sb0000_0010_1000_1011_1110;
	wire signed [17:0] neg_inv_two_pi;
	assign neg_inv_two_pi = -32'sd1 * inv_two_pi;
	
	reg [31:0] abs_theta;
	reg signed [31:0] theta_in_pi_range;
	reg signed [63:0] producta;			//for storing a product with overflow bits
	reg signed [63:0] productb;			//for storing a product with overflow bits
	reg [31:0] qpd;							//nearest multiple of pi
	reg signed [31:0] offset;
	reg signed [63:0] cos_index;
	reg signed [31:0] cos_index_temp;
	reg signed [31:0] cos_in;
	reg signed [31:0] new_theta;
	parameter PI = 32'b11_0010_0100_0011_1111;
	parameter two_PI = 32'b11_0010_0100_0011_11110;
	parameter inv_PI = 32'h0000517C;
	
	reg get_next;
	wire signed [31:0] frequency, magnitude, index;
	reg signed [31:0] magnitude_unscaled;
	pitchShift pshft(.pitch(4'b0),
					.clock_27M(clock_27mhz),
					.get_next(get_next),
					.restart(restart),
					.new_bin_freq(frequency),									
					.new_bin_magn(magnitude),											
					.new_bin_index(index));
	
	wire signed [31:0] magn_sum_out_buff, phase_sum_out_buff;
	reg signed [31:0] magn_sum_out, phase_sum_out, magn_sum_in, phase_sum_in;
	reg write_data;
	wire [8:0] addr;
	assign addr = index[24:16];
	
	ram32x512 magnSumMem(.clka(clock_27mhz),
								.dina(magn_sum_in),
								.addra(addr),
								.wea(write_data),
								.douta(magn_sum_out_buff));
								
	ram32x512 phasSumMem(.clka(clock_27mhz),
								.dina(phase_sum_in),
								.addra(addr),
								.wea(write_data),
								.douta(phase_sum_out_buff));
	
	wire nd, rfd, rdy;
	assign nd = counter == 10;
	cosine cos(.THETA(cos_in[31:16]),
					.CLK(clock_27mhz),
					.ND(nd),
					.RFD(rfd),
					.RDY(rdy),
					.SINE(sin_phase),
					.COSINE(cos_phase));
					
	always @(*) begin
		magn_sum_in = magnitude + magn_sum_out_buff;
		
		center_freq_prod = freq_per_bin * index;
		center_frequency = center_freq_prod >>> 16;
		frequency_deviation = frequency - center_frequency;
		
		bin_dev_prod = frequency_deviation * freq_per_bin_inv;
		bin_deviation = bin_dev_prod >>> 16;
		
		bin_dev_osamp_prod = bin_deviation * pi_one_half;
		bin_dev_osamp = bin_dev_osamp_prod >>> 16;
		
		expct_phase_adv_prod = index * pi_one_half;
		expct_phase_adv = expct_phase_adv_prod >>> 16;
		phase = bin_dev_osamp + expct_phase_adv + phase_sum_out_buff;
		
		
		//map phase to 0-2pi interval
		if(phase < 0) abs_theta = (-32'sd1 * phase);
		else abs_theta = phase;
		producta = abs_theta * inv_PI;
		qpd = {producta[47:32],16'b0};								//nearest integer multiple of pi
		offset = qpd + (qpd&32'h10000);							//must subtract a multiple of 2*pi
		productb = PI*offset;
		if(phase >= 0) theta_in_pi_range = phase - (productb>>>16);
		else theta_in_pi_range = phase + (productb>>>16);
		if (theta_in_pi_range >= 0) cos_index_temp = theta_in_pi_range;	
		else cos_index_temp = two_PI + theta_in_pi_range;	
		cos_index = cos_index_temp * inv_two_pi;
		cos_in = cos_index[31:0];
		
		magnitude_unscaled = magn_sum_in >>> 4;
		real_part = magnitude_unscaled * cos_phase;
		imag_part = magnitude_unscaled * sin_phase;
		phase_sum_in = phase;

		get_next = switch & counter == 0;
		if(we & index[31:16] < 512) write_data = 1;
		else write_data = 0;
		
	end
	
	always @(posedge clock_27mhz) begin
		if(restart) begin
			counter <= 5'd1;
			we <= 0;
		end
		if(switch) counter <= counter + 1;
		if(counter == 28 || counter == 30) we <= ~we;
		if (index[31:16] < 512 && switch && counter == 3) begin
			magn_sum_out <= magn_sum_out_buff;
			phase_sum_out <= phase_sum_out_buff;
		end 
	end
endmodule

// Switch Debounce Module
// use your system clock for the clock input
// to produce a synchronous, debounced output
module debounce #(parameter DELAY=270000)   // .01 sec with a 27Mhz clock
	        (input reset, clock, noisy,
	         output reg clean);

   reg [18:0] count;
   reg new;

   always @(posedge clock)
     if (reset)
       begin
	  count <= 0;
	  new <= noisy;
	  clean <= noisy;
       end
     else if (noisy != new)
       begin
	  new <= noisy;
	  count <= 0;
       end
     else if (count == DELAY)
       clean <= new;
     else
       count <= count+1;
      
endmodule

module clockDivider(input clock_27mhz, input[4:0] numCycles, output enable);
	reg [4:0] counter;
	
	assign enable = (counter == numCycles);
	
	always @(posedge clock_27mhz) begin
		if(counter == numCycles) counter <= 0;
		else counter <= counter + 1;
	end
endmodule
